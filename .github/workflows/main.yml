# Automated Raydium CP-Swap Overflow Test for Windows
# This workflow is configured to run on a self-hosted Windows runner.
# It automates the setup, deployment, and testing of your Solana program.

name: Automated Raydium CP-Swap Overflow Test

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  pull_request:
    branches: [ main ]

jobs:
  test:
    # This job will run on your self-hosted Windows runner.
    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Manually install Rust using the official Windows installer.
    - name: Install Rust
      shell: powershell
      run: |
        # Use the official URL for the Rustup Windows installer.
        Invoke-WebRequest -Uri "https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe" -OutFile "rustup-init.exe"
        .\rustup-init.exe -y --default-toolchain stable --profile minimal
        
    - name: Add Rust to PATH
      shell: powershell
      run: |
        # Add the cargo bin directory to the PATH for subsequent steps.
        echo "::add-path::$HOME\.cargo\bin"
        
    - name: Install Solana CLI
      shell: powershell
      run: |
        # Install the Solana CLI using PowerShell.
        Invoke-WebRequest -Uri "https://release.solana.com/v1.18.2/solana-install-init-x86_64-pc-windows-msvc.exe" -OutFile "solana-install-init.exe"
        .\solana-install-init.exe --noninteractive
        # Add the Solana bin directory to the PATH.
        echo "::add-path::$HOME\AppData\Local\solana\install\active_release\bin"

    - name: Install BPF Toolchain
      shell: bash
      run: |
        # Add the Rust source component required for BPF development.
        rustup component add rust-src
        # Manually clone the repository to avoid authentication errors.
        git clone https://github.com/solana-labs/cargo-build-bpf.git
        cd cargo-build-bpf
        cargo install --path .

    - name: Start Solana Test Validator and Wait for Readiness
      shell: powershell
      run: |
        # Start the validator in the background. The --reset flag clears previous data.
        Start-Process -FilePath "solana-test-validator" -ArgumentList "--reset" -NoNewWindow
        
        # Poll the validator's health endpoint until it responds.
        for ($i = 1; $i -le 10; $i++) {
          try {
            solana ping -v 2>$null | Out-Null
            if ($LastExitCode -eq 0) {
              echo "Solana test validator is ready."
              exit 0
            }
          } catch {
            # Ignore errors and continue polling.
          }
          echo "Waiting for validator... $i"
          Start-Sleep -Seconds 5
        }
        
        echo "Solana test validator failed to start."
        exit 1

    - name: Build Raydium CP-Swap Program
      shell: bash
      run: |
        # Build the Solana BPF program.
        cargo build-bpf --manifest-path=program/Cargo.toml

    - name: Deploy Program to Local Validator
      shell: powershell
      run: |
        # Find the compiled program file.
        $PROGRAM_SO = (Get-ChildItem -Path target\deploy -Filter *.so | Select-Object -First 1).FullName
        # Deploy the program to the local validator and capture its Program ID.
        $PROGRAM_OUTPUT = solana program deploy $PROGRAM_SO
        $PROGRAM_ID = ($PROGRAM_OUTPUT | Select-String -Pattern "Program Id:").ToString().Split(" ")[-1]
        # Export the Program ID as an environment variable for the next step.
        echo "PROGRAM_ID=$PROGRAM_ID" >> $env:GITHUB_ENV

    - name: Run Overflow Test
      env:
        # Pass the newly deployed Program ID to the test script.
        RAYDIUM_CP_SWAP_PROGRAM_ID: ${{ env.PROGRAM_ID }}
      shell: bash
      run: |
        # Run your specified test.
        cargo test --test overflow_test
